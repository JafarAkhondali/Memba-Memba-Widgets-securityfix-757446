/**
 * Copyright (c) 2013-2018 Memba Sarl. All rights reserved.
 * Sources at https://github.com/Memba
 */

import $ from 'jquery';
import 'kendo.core';
import assert from '../common/window.assert.es6';
import CONSTANTS from '../common/window.constants.es6';

const {
    format,
    observable
} = window.kendo;

// IMPORTANT TODO Modify for lazy loading of dependency modules
// See http://blog.avenuecode.com/lazy-loading-es2015-modules-in-the-browser

// TODO Add calculated solutions : WHat day is it today? And random number generation.

// TODO solution$ for the list might be calculates depending on validation alorith see dropZone with sumEauql should make the sum

// Add localization to textboxes with numbers and masked input
// Add localization to Worker functions to parse numbers and dates


/**
 * Registry of tools
 * @type {{register: Function}}
 */
export const tools = observable({
    active: null,
    register(Class) {
        assert.type(CONSTANTS.FUNCTION, Class, assert.format(assert.messages.type.default, 'Class', CONSTANTS.FUNCTION));
        assert.type(CONSTANTS.OBJECT, Class.prototype, assert.format(assert.messages.type.default, 'Class.prototype', CONSTANTS.OBJECT));
        const obj = new Class();
        // assert.instanceof(Tool, obj, assert.format(assert.messages.instanceof.default, 'obj', 'kidoju.Tool'));
        // assert.type(CONSTANTS.STRING, obj.id, assert.format(assert.messages.type.default, 'obj.id', CONSTANTS.STRING));
        obj.id = obj.id.trim(); // TODO: why???? prefer assert.match
        // assert.ok(obj.id.length > 0, 'A tool cannot have an empty id');
        // assert.ok(obj.id !== ACTIVE && obj.id !== REGISTER, 'A tool cannot have `active` or `register` for id');
        // assert.isUndefined(this[obj.id], 'Existing tools cannot be replaced');
        this[obj.id] = obj;
        if (obj.id === POINTER) {
            this.active = POINTER;
        }
    }
});

/**
 * @class BaseTool
 */
export class BaseTool {
    svg: {
        success: SVG_SUCCESS,
        failure: SVG_FAILURE
    },
    i18n: {
        // They are here to be translated in kidoju.messages.[locale].js
        tool: {
            top: { title: i18n.tool.top.title },
            left: { title: i18n.tool.left.title },
            height: { title: i18n.tool.height.title },
            width: { title: i18n.tool.width.title },
            rotate: { title: i18n.tool.rotate.title }
        },
        dialogs: {
            ok: { text: i18n.dialogs.ok.text },
            cancel: { text: i18n.dialogs.cancel.text }
        },
        messages: {
            invalidAltText: i18n.messages.invalidAltText,
            invalidAudioFile: i18n.messages.invalidAudioFile,
            invalidColor: i18n.messages.invalidColor,
            invalidData: i18n.messages.invalidData,
            invalidDescription: i18n.messages.invalidDescription,
            invalidConstant: i18n.messages.invalidConstant,
            invalidFailure: i18n.messages.invalidFailure,
            invalidFormula: i18n.messages.invalidFormula,
            invalidImageFile: i18n.messages.invalidImageFile,
            invalidName: i18n.messages.invalidName,
            invalidShape: i18n.messages.invalidShape,
            invalidSolution: i18n.messages.invalidSolution,
            invalidStyle: i18n.messages.invalidStyle,
            invalidSuccess: i18n.messages.invalidSuccess,
            invalidText: i18n.messages.invalidText,
            invalidValidation: i18n.messages.invalidValidation,
            invalidVideoFile: i18n.messages.invalidVideoFile
        }
    }

    /**
     * Constructor
     * @constructor
     * @param options
     */
    constructor(options) {
        // Extend tool with init options
        $.extend(
            this,
            {
                id: null,
                icon: null,
                description: null,
                cursor: null,
                weight: 0,
                height: 250,
                width: 250,
                attributes: {},
                properties: {},
            },
            options
        );

        // Pass solution adapter library to validation adapter, especially for the code editor
        if (this.properties && this.properties.solution instanceof BaseAdapter && this.properties.validation instanceof adapters.ValidationAdapter) {
            this.properties.validation.library = this.properties.solution.library;
            this.properties.validation.defaultValue = LIB_COMMENT + this.properties.solution.libraryDefault;
        }
    }

    /**
     * Get a kidoju.data.Model for attributes
     * @class kidoju.Tool
     * @method _getAttributeModel
     * @returns {kidoju.data.Model}
     * @private
     */
    _getAttributeModel() {
        var model = { fields: {} };
        for (var attr in this.attributes) {
            if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
                if (this.attributes[attr] instanceof BaseAdapter) {
                    model.fields[attr] = this.attributes[attr].getField();
                }
            }
        }
        return Model.define(model);
    }

    /**
     * Gets property grid row specifications for attributes
     * @class kidoju.Tool
     * @method _getAttributeRows
     * @returns {Array}
     * @private
     */
    _getAttributeRows() {
        var rows = [];
        var data = {};
        data[kendo.attr('decimals')] = 0;
        data[kendo.attr('format')] = 'n0';
        // Add top, left, height, width, rotation
        rows.push(new adapters.NumberAdapter({ title: this.i18n.tool.top.title }, data).getRow('top'));
        rows.push(new adapters.NumberAdapter({ title: this.i18n.tool.left.title }, data).getRow('left'));
        rows.push(new adapters.NumberAdapter({ title: this.i18n.tool.height.title }, data).getRow('height'));
        rows.push(new adapters.NumberAdapter({ title: this.i18n.tool.width.title }, data).getRow('width'));
        rows.push(new adapters.NumberAdapter({ title: this.i18n.tool.rotate.title }, data).getRow('rotate'));

        // Add other attributes
        for (var attr in this.attributes) {
            if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
                if (this.attributes[attr] instanceof BaseAdapter) {
                    rows.push(this.attributes[attr].getRow('attributes.' + attr));
                }
            }
        }
        return rows;
    }

    /**
     * Get a kidoju.data.Model for properties
     * @class kidoju.Tool
     * @method _getPropertyModel
     * @returns {kidoju.data.Model}
     * @private
     */
    _getPropertyModel() {
        var properties = this.properties;
        var model = { fields: {} };
        for (var prop in properties) {
            if (properties.hasOwnProperty(prop)) {
                if (properties[prop] instanceof BaseAdapter) {
                    model.fields[prop] = properties[prop].getField();
                    if (prop === 'name') {
                        // This cannot be set as a default value on the  adapter because each instance should have a different name
                        model.fields.name.defaultValue = 'val_' + randomString(6);
                    } else if (prop === 'validation') {
                        // We need the code library otherwise we won't have code to execute when validation === '// equal' or any other library value
                        model._library = properties.validation.library;
                    }
                }
            }
        }
        return Model.define(model);
    }

    /**
     * Gets property grid row specifications for properties
     * @class kidoju.Tool
     * @method _getPropertyRows
     * @returns {Array}
     * @private
     */
    _getPropertyRows() {
        var rows = [];

        for (var prop in this.properties) {
            if (this.properties.hasOwnProperty(prop)) {
                if (this.properties[prop] instanceof BaseAdapter) {
                    rows.push(this.properties[prop].getRow('properties.' + prop));
                }
            }
        }
        return rows;
    }

    /**
     * Get Html or jQuery content
     * @class kidoju.Tool
     * @method getHtmlContent
     * @param component
     * @param mode
     * @returns {*}
     */
    getHtmlContent(component, mode) {
        assert.instanceof(PageComponent, component, assert.format(assert.messages.instanceof.default, 'component', 'kidoju.data.PageComponent'));
        assert.enum(Object.keys(kendo.ui.Stage.fn.modes), mode, assert.format(assert.messages.enum.default, 'mode', Object.keys(kendo.ui.Stage.fn.modes)));
        var template = kendo.template(this.templates[mode] || this.templates.default);
        return template($.extend(component, { ns: kendo.ns }));
    }

    /**
     * Return the default value when playing the component as part of a test
     * @param component
     */
    getTestDefaultValue(component) {
        // TODO: consider removing as it seems useless
        return;
    }

    /**
     * Add the display of a success or failure icon to the corresponding stage element
     * @returns {string}
     */
    showResult () {
        // Contrary to https://css-tricks.com/probably-dont-base64-svg/, we need base64 encoded strings otherwise kendo templates fail
        return '<div class=".kj-element-result" data-#= ns #bind="visible: #: properties.name #">' +
            '<div data-#= ns #bind="visible: #: properties.name #.result" style="position: absolute; height: 92px; width:92px; bottom: -20px; right: -20px; background-image: url(data:image/svg+xml;base64,' + Tool.fn.svg.success + '); background-size: 92px 92px; background-repeat: no-repeat; width: 92px; height: 92px;"></div>' +
            '<div data-#= ns #bind="invisible: #: properties.name #.result" style="position: absolute; height: 92px; width:92px; bottom: -20px; right: -20px; background-image: url(data:image/svg+xml;base64,' + Tool.fn.svg.failure + '); background-size: 92px 92px; background-repeat: no-repeat; width: 92px; height: 92px;"></div>' +
            '</div>';
    }

    /**
     * Improved display of value in score grid
     * Note: search for getScoreArray in kidoju.data
     * @param testItem
     */
    value$(testItem) {
        return kendo.htmlEncode(testItem.value || '');
    }

    /**
     * Improved display of solution in score grid
     * Note: search for getScoreArray in kidoju.data
     * @param testItem
     */
    solution$(testItem) {
        return kendo.htmlEncode(testItem.solution || '');
    }

    // onEnable: function (e, component, enabled) {},
    // onMove: function (e, component) {},
    // onResize: function (e, component) {},
    // onRotate: function (e, component) {},

    /* This function's cyclomatic complexity is too high. */
    /* jshint -W074 */

    /**
     * Component validation
     * @param component
     * @param pageIdx
     */
    validate(component, pageIdx) {
        /* jshint maxcomplexity: 14 */
        assert.instanceof (PageComponent, component, assert.format(assert.messages.instanceof.default, 'component', 'kidoju.data.PageComponent'));
        assert.type(CONSTANTS.NUMBER, pageIdx, assert.format(assert.messages.type.default, 'pageIdx', CONSTANTS.NUMBER));
        var ret = [];
        if (component.properties && !component.properties.disabled) {
            var properties = component.properties;
            var messages = this.i18n.messages;
            var description = this.description; // tool description
            if ($.type(properties.behavior) === CONSTANTS.STRING && properties.behavior !== 'none') {
                // Note: This test might be better suited to inherited tools (labels, images and math expressions)
                if (!RX_CONSTANT.test(properties.constant)) {
                    ret.push({ type: ERROR, index: pageIdx, message: kendo.format(messages.invalidConstant, description, /*name,*/ pageIdx + 1) });
                }
            } else if ($.type(component.properties.name) === CONSTANTS.STRING) {
                var name = properties.name;
                if (!RX_NAME.test(name)) {
                    ret.push({ type: ERROR, index: pageIdx, message: kendo.format(messages.invalidName, description, name, pageIdx + 1) });
                }
                if (!properties.question || !RX_DESCRIPTION.test(properties.question)) {
                    ret.push({ type: ERROR, index: pageIdx, message: kendo.format(messages.invalidDescription, description, name, pageIdx + 1) });
                }
                if (!properties.solution || !RX_SOLUTION.test(properties.solution)) { // What if properties.solution is a number or a date?
                    ret.push({ type: ERROR, index: pageIdx, message: kendo.format(messages.invalidSolution, description, name, pageIdx + 1) });
                }
                if (!RX_VALIDATION_LIBRARY.test(properties.validation) && !RX_VALIDATION_CUSTOM.test(properties.validation)) {
                    ret.push({ type: ERROR, index: pageIdx, message: kendo.format(messages.invalidValidation, description, name, pageIdx + 1) });
                }
                if ($.type(properties.failure) === CONSTANTS.NUMBER && $.type(properties.omit) === CONSTANTS.NUMBER && properties.failure > Math.min(properties.omit, 0)) {
                    ret.push({ type: WARNING, index: pageIdx, message: kendo.format(messages.invalidFailure, description, name, pageIdx + 1) });
                }
                if ($.type(properties.success) === CONSTANTS.NUMBER && $.type(properties.omit) === CONSTANTS.NUMBER && properties.success < Math.max(properties.omit, 0)) {
                    ret.push({ type: WARNING, index: pageIdx, message: kendo.format(messages.invalidSuccess, description, name, pageIdx + 1) });
                }
            }
        }
        return ret;
    }
};

/**
 * @class BaseAdapter
 * An adapter provides the UI to edit a property, especially from a PageComponent
 */
export class BaseAdapter {

    // IMPORTANT TODO Consider pub sub mechanism especially to refresh or disable dependant properties
    // Or make it systematic

    // TODO: Review HTML encode????

    /**
     * Constructor
     * @constructor
     * @param options
     */
    constructor(options) {
        const opts = options || {};
        // this.value = opts.value;

        // See http://docs.telerik.com/kendo-ui/api/javascript/data/model#methods-Model.define
        this.defaultValue = opts.defaultValue;
        this.editable = opts.editable;
        this.nullable = opts.nullable;
        this.parse = opts.parse;
        this.from = opts.from;
        this.validation = opts.validation;

        // See http://docs.telerik.com/kendo-ui/api/javascript/ui/grid#configuration-columns
        this.field = opts.field;
        this.title = opts.title;
        this.format = opts.format;
        this.template = opts.template;
        this.editor = opts.editor;
        this.attributes = opts.attributes;

        // Data type of adapter
        this.type = undefined;
    }

    /**
     * Get a kendo.data.Model field
     * See http://docs.telerik.com/kendo-ui/api/javascript/data/model#methods-Model.define
     * @returns {{}}
     */
    getField() {
        var field = {};
        if ([CONSTANTS.STRING, CONSTANTS.NUMBER, CONSTANTS.BOOLEAN, CONSTANTS.DATE].indexOf(this.type) > -1) {
            field.type = this.type;
        }
        if ($.type(this.defaultValue) === this.type ||
            $.type(this.type) === CONSTANTS.UNDEFINED) { // TODO: test that defaultValue is null or an object
            field.defaultValue = this.defaultValue;
        }
        if ($.type(this.editable) === CONSTANTS.BOOLEAN) {
            field.editable = this.editable;
        }
        if ($.type(this.nullable) === CONSTANTS.BOOLEAN) {
            field.nullable = this.nullable;
        }
        if ($.isFunction(this.parse)) {
            field.parse = this.parse;
        }
        if ($.type(this.from) === CONSTANTS.STRING) {
            field.from = this.from;
        }
        if ($.type(this.validation) === CONSTANTS.OBJECT) {
            field.validation = this.validation;
        }
        return field;
    }

    /**
     * Get a property grid row
     * See http://docs.telerik.com/kendo-ui/api/javascript/ui/grid#configuration-columns
     * @param field - This is the MVVM path to the field the data is bound to
     * @returns {{}}
     */
    getRow(field) {
        if ($.type(field) !== CONSTANTS.STRING || field.length === 0) {
            throw new TypeError();
        }
        var row = {};
        row.field = field; // Mandatory
        if ($.type(this.title) === CONSTANTS.STRING) {
            row.title = this.title;
        }
        if ($.type(this.format) === CONSTANTS.STRING) {
            row.format = this.format;
        }
        if ($.type(this.template) === CONSTANTS.STRING) {
            row.template = this.template;
        }
        if ($.isFunction(this.editor) ||
            ($.type(this.editor) === CONSTANTS.STRING && ($.type(kidoju.editors) === CONSTANTS.UNDEFINED || $.isFunction(kidoju.editors[this.editor])))) {
            row.editor = this.editor;
        }
        // TODO: HTML encode????
        if ($.isPlainObject(this.attributes)) {
            row.attributes = this.attributes;
        }
        return row;
    }

}

/**
 * Maintain compatibility with legacy code
 */
window.kidoju = window.kidoju || {};
window.kidoju.tools = tools;
window.kidoju.Tool = BaseTool;

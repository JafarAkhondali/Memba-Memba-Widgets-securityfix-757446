/**
 * Copyright (c) 2013-2015 Memba Sarl. All rights reserved.
 * Sources at https://github.com/Memba
 */

/* jslint browser: true, jquery: true */
/* jshint browser: true, jquery: true */

(function(window, $, undefined) {

    'use strict';

    // shorten references to variables for uglification
    //var fn = Function,
    //    global = fn('return this')(),
    var kendo = window.kendo,
        ui = kendo.ui,
        Widget = ui.Widget,
        STRING = 'string',
        NUMBER = 'number',
        BOOLEAN = 'boolean',
        DATE = 'date',
        UNDEFINED = 'undefined',
        //Html
        SPAN = 'span',
        SPAN_ELEMENT = '<span/>',
        INPUT = 'input',
        INPUT_ELEMENT = '<input/>',
        INPUT_TYPES = 'color,date,datetime,datetime-local,email,month,number,range,search,tel,text,time,url,week',
        //We have left: button, checkbox, file, hidden, image, password, radio, reset, submit
        //SEE:http://www.w3schools.com/tags/att_input_type.asp
        INPUT_WIDGETS='colorpicker,datepicker,datetimepicker,numerictextbox,rating,slider,timepicker',
        TEXTAREA = 'textarea',
        TEXTAREA_ELEMENT = '<textarea/>',
        TBODY = 'tbody',
        //TBODY_ELEMENT = '<tbody/>',
        TYPE = 'type',
        NULL = null,
        //DATA_ID = 'data-id',
        DATA_ROLE = 'data-role',
        DATA_BIND = 'data-bind',
        DATA_BIND_VALUE = 'value: ';
        //DATA_SELECTED = 'data-selected';


    /**
     * PropertyGrid widget
     * @class PropertyGrid
     * @extend Widget
     */
    var PropertyGrid = Widget.extend({

        /**
         * Initializes the widget
         * @method init
         * @param element
         * @param options
         */
        init: function(element, options) {
            var that = this;
            // base call to widget initialization
            Widget.fn.init.call(this, element, options);
            that._layout();
        },

        /**
         * Widget options
         * @property options
         */
        options: {
            name: 'PropertyGrid',
            properties: NULL,
            schema: NULL,
            rows: NULL
        },

        /**
         * The row template
         * @property _rowTemplate
         * @private
         */
        _rowTemplate: '<tr role="row"><td role="gridcell">#: title #</td><td role="gridcell">#= editor #</td></tr>',

        /**
         * The alternate row template
         * @property _altRowTemplate
         * @private
         */
        _altRowTemplate: '<tr class="k-alt" role="row"><td role="gridcell">#: title #</td><td role="gridcell">#= editor #</td></tr>',

        /**
         * Builds the widget layout
         * @method _layout
         * @private
         */
        _layout: function () {
            var that = this;
            $(that.element)
                .addClass('k-grid k-widget')
            /*Add header
            The following is copied from the markup generated by a kendoGrid
            <div class="k-grid-header" style="padding-right: 17px;">
                <div class="k-grid-header-wrap">
                    <table role="grid">
                        <colgroup><col><col></colgroup>
                        <thead><tr>
                            <th role="columnheader" data-field="Property" class="k-header">Property</th>
                            <th role="columnheader" data-field="Value" class="k-header">Value</th>
                        </tr></thead>
                    </table>
                </div>
            </div>
            We are using this markup below after removing data-* attributes
            role attributes are used by WAI-ARIA capable screen readers to deduct content from the page
            */
                .append(
                    '<div class="k-grid-header" style="padding-right: 17px;">' +
                        '<div class="k-grid-header-wrap">' +
                            '<table role="grid">' +
                                '<colgroup><col><col></colgroup>' +
                                '<thead><tr>' +
                                    '<th role="columnheader" class="k-header">Property</th>' +  //TODO: Localize
                                    '<th role="columnheader" class="k-header">Value</th>' +  //TODO: Localize
                                '</tr></thead>' +
                            '</table>' +
                        '</div>' +
                    '</div>'
                )
            /*Add content - See refresh
            The following is copied from the markup generated by a kendoGrid
            <div class="k-grid-content">
                <table role="grid">
                    <colgroup><col><col></colgroup>
                    <tbody>
                        <tr data-uid="71c6856c-77dc-47a6-82b7-2c955c0c9794" role="row"><td role="gridcell">Title</td><td role="gridcell">Some Interesting Title</td></tr>
                        <tr class="k-alt" data-uid="a4cf188a-f5b6-40e1-b66c-296b7a7414ba" role="row"><td role="gridcell">Author</td><td role="gridcell">Me</td></tr>
                        <tr data-uid="36fb3065-da2b-4a30-b791-9c89907fe23f" role="row"><td role="gridcell">Version</td><td role="gridcell">1</td></tr>
                        <tr class="k-alt" data-uid="4945eeab-3074-4f97-8f25-fd9573453060" role="row"><td role="gridcell">Creation Date</td><td role="gridcell">14 Feb 2012</td></tr>
                        <tr data-uid="3d11ec9b-988f-428a-85d3-d39d0a61cf30" role="row"><td role="gridcell">Modification Date</td><td role="gridcell">14 Feb 2012</td></tr>
                        <tr class="k-alt" data-uid="4c175649-632d-44f3-8a05-36c0c81a590f" role="row"><td role="gridcell">Description</td><td role="gridcell">Some Essential Description</td></tr>
                        <tr data-uid="d9e7c873-4473-4b90-8b8a-cc0b7f92c2b4" role="row"><td role="gridcell">User Instructions</td><td role="gridcell">Some Key User Guidance</td></tr>
                        <tr class="k-alt" data-uid="0ae0cf0e-c597-4189-95b8-fb582f28c8ec" role="row"><td role="gridcell">Rating</td><td role="gridcell">Triple A</td></tr>
                        <tr data-uid="d71aba8e-f80e-4a92-afaf-1b9b61e5c524" role="row"><td role="gridcell">Views</td><td role="gridcell">1,000,000</td></tr>
                    </tbody>
                </table>
            </div>
             We are using this markup below after removing data-* attributes
             role attributes are used by WAI-ARIA capable screen readers to deduct content from the page
            */
                .append(
                    '<div class="k-grid-content">' +
                        '<table role="grid">' +
                            '<colgroup><col><col></colgroup>' +
                            '<tbody>' +
                            //This is where lines are added
                            '</tbody>' +
                        '</table>' +
                    '</div>'
                );

            //We need an observable object to display in the property grid
            if (that.options.properties instanceof kendo.data.ObservableObject) {
                //Ideally we need a schema to tell the property grid about types, default values, editable properties and validation
                if ($.isPlainObject(that.options.schema) && (that.options.schema.model)) {
                    if (that.options.properties instanceof that.options.schema.model) {
                        if($.isArray(that.options.rows) && that.options.rows.length > 0) { //If we also have row metadata
                            that._layoutWithSchemaAndRows();
                        } else { //without rows
                            that._layoutWithSchemaOnly();
                        }
                    }
                }
                else { //No schema
                    if($.isArray(that.options.rows) && that.options.rows.length > 0) { //If we have row metadata
                        that._layoutWithRowsOnly();
                    } else { //without rows
                        that._layoutFromValues();
                    }
                }
                kendo.bind($(that.element), that.options.properties);
            }
        },

        /**
         * Builds the widget when the object displayed in the property grid is supplied with schema and row metadata
         * @method _layoutWithSchemaAndRows
         * @private
         */
        _layoutWithSchemaAndRows: function() {
            var that = this,
                tbody = $(that.element).find(TBODY).first(),
                rowTemplate = kendo.template(that._rowTemplate),
                altRowTemplate = kendo.template(that._altRowTemplate),
                count = 0;
            //with rows
            $.each(that.options.rows, function(index, row){
                var template = (count % 2 === 1) ? altRowTemplate : rowTemplate,
                    field = that.options.properties.fields[row.field],
                    value = that.options.properties[row.field],
                    editor;
                if($.type(field.editable) === UNDEFINED || field.editable) { //field.editable is true by default (undefined)
                    //is there a custom editor?
                    if($.isFunction(window[row.editor])) {
                        tbody.append(template({title: row.title, editor: ''}));
                        var container = tbody.find('td[role=gridcell]').last(),
                            options = {
                                field: row.field,
                                editor: row.editor,
                                model: that.options.properties
                            };
                        window[row.editor](container, options);
                    //is there a named editor?
                    } else if ($.type(row.editor) === STRING) {
                        //if there is a kendo widget wrapping an input control, use it
                        if ((INPUT_WIDGETS.indexOf(row.editor.toLowerCase()) > -1) && kendo.rolesFromNamespaces(kendo.ui).hasOwnProperty(row.editor.toLowerCase())) {
                            tbody.append(template({title: row.title, editor: INPUT_ELEMENT}));
                            editor = tbody.find(INPUT).last();
                            editor
                                .attr(DATA_ROLE, row.editor)
                                .attr(DATA_BIND, DATA_BIND_VALUE + row.field);
                        } else if (INPUT_TYPES.indexOf(row.editor.toLowerCase()) > -1) {
                            tbody.append(template({title: row.title, editor: INPUT_ELEMENT}));
                            editor = tbody.find(INPUT).last();
                            editor
                                .attr(TYPE, row.editor.toLowerCase())
                                .attr(DATA_BIND, DATA_BIND_VALUE + row.field)
                                .addClass('k-textbox');
                        } else if (row.editor.toLowerCase() === TEXTAREA) {
                            tbody.append(template({title: row.title, editor: TEXTAREA_ELEMENT}));
                            editor = tbody.find(TEXTAREA).last();
                            editor
                                .attr(DATA_BIND, DATA_BIND_VALUE + row.field)
                                .addClass('k-textbox');
                        }
                    //is there a template?
                    } else if (row.template) {
                        $.noop();
                    } else if (field.type === NUMBER) {
                        tbody.append(template({title: row.title, editor: INPUT_ELEMENT}));
                        editor = tbody.find(INPUT).last();
                        editor.attr(DATA_BIND, DATA_BIND_VALUE + row.field);
                        editor.kendoNumericTextBox();
                        //TODO add formatting
                    } else if (field.type === BOOLEAN) {
                        //TODO
                    } else if (field.type === DATE) {
                        //TODO
                    //default field type is 'string' - See http://docs.kendoui.com/api/framework/model
                    } else {
                        tbody.append(template({title: row.title, editor: INPUT_ELEMENT}));
                        editor = tbody.find(INPUT).last();
                        editor
                            .attr(TYPE, 'text')
                            .attr(DATA_BIND, DATA_BIND_VALUE + row.field)
                            .addClass('k-textbox');
                    }
                } else { //readonly value
                    tbody.append(template({title: row.title, editor: SPAN_ELEMENT}));
                    editor = tbody.find(SPAN).last();
                    editor.attr(DATA_BIND, DATA_BIND_VALUE + row.field);
                    //TODO add formatting, sizing and validation
                }
                count++;
            });
        },

        /**
         * Builds the widget when the object displayed in the property grid is supplied with schema only
         * @method _layoutWithSchemaOnly
         * @private
         */
        _layoutWithSchemaOnly: function() {
            //TODO
            $.noop();
        },

        /**
         * Builds the widget when the object displayed in the property grid is supplied with row metadata only
         * @method _layoutWithRowsOnly
         * @private
         */
        _layoutWithRowsOnly: function() {
            //TODO
            $.noop();
        },

        /**
         * Builds the widget when the object displayed in the property grid is supplied raw
         * Without schema and row metadata, the property grid is built guessing types from values
         * Complex object types, undefined and nulls are hidden (better not displaying than messing with data)
         * Booleans are displayed as checkboxes
         * Numbers are displayed as kendoNumericTextBox
         * Dates are displayed as kendoDatePicker
         * Colors are displayed as kendoColorPicker
         * Urls and emails are displayed with validation rules
         * Other short strings are displayed in textboxes
         * Other long strings are displayed as textareas
         * @method _layoutFromValues
         * @private
         */
        _layoutFromValues: function() {
            //TODO
            $.noop();
        },

        /**
         * Clears the DOM from modifications made by the widget
         * @method _clear
         * @private
         */
        _clear: function() {
            var that = this;
            //TODO: Call destroy on all child widgets
            //unbind descendant events
            $(that.element).find('*').off();
            //clear element
            $(that.element)
                .empty()
                .off()
                .removeClass('k-widget k-grid');
        },


        /**
         * Destroys the widget
         * @method destroy
         */
        destroy: function() {
            var that = this;
            that._clear();
            Widget.fn.destroy.call(this);
        }

    });

    ui.plugin(PropertyGrid);

})(this, jQuery);
